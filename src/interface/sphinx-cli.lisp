;; Copyright 2010-2018 Ben Lambert

;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at

;;     http://www.apache.org/licenses/LICENSE-2.0

;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.


(in-package :sphinx-l)

(defparameter *feature-extraction-param* nil)
(defparameter *implemented-options-raw* nil)
(defparameter *unimplemented-options-raw* nil)
(defparameter *full-options-raw* nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;; CLI parsing, dispatch of DECODE function, usage, etc. ;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun get-options-table ()
  "Create a hash table mapping from command line arguments specified with a single dash (e.g. -inspen) to their value."
  (let ((raw (subseq sb-ext:*posix-argv* 1 (length sb-ext:*posix-argv*))) ;; remove "sbcl" from the beginning...
	(table (make-hash-table :test 'equalp)))
    (loop while raw
	 for key = (pop raw)
	 for value = (pop raw) do
	 (assert (char= (elt key 0) #\-))
	 (setf key (remove #\- key))
	 (setf (gethash key table) value))
    table))

(defun read-ctl-file (opts)
  "Given the hash table of command line options, read the ctl file, and combine each
   line with the prefix and suffix of the MFCC files. Return a list of filenames."
  (let* ((dir (gethash "cepdir" opts))
	 (ext (gethash "cepext" opts))
	 (ctl-filename (gethash "ctl" opts))
	 (start (parse-integer (gethash "ctloffset" opts)))
	 (count (parse-integer (gethash "ctlcount" opts)))
	 (lines (file->line-list ctl-filename))
	 (files (subseq lines start (+ start count))))
    (setf files (mapcar (lambda (x) (list (format nil "~A/~A~A" dir x ext) x)) files))
    files))

(defun print-cli-usage ()
  "Print implemented usage."
  (let ((all-opts (append *feature-extraction-param* *implemented-options-raw*)))
    (setf all-opts (sort all-opts 'string-lessp :key 'first))
    (format t "Usage: sphinxl_decode.sh [args]~%")
    (format t "Arguments list definition:~%")
    (format t "[NAME]			[DEFLT]		[DESCR]~%")
    (loop for (name default description) in all-opts do
	 (format t "~25a ~16a ~a~%" name default description))))

(defun print-matchseg-line (stream rr id)
  "Print the segmented match line to the matchseg file stream."
  (format stream "~{~A~^ ~} (~A)~%" (rr-bp-list rr) id))
  
(defun sphinxlisp-decode ()
  "A top-level function that calls DECODE.  This function extracts all the various options from the command line.
   This function also loads all the specified models."
  (let ((opts (get-options-table)))
    (when (or (gethash "help" opts) (= (hash-table-count opts) 0))
      (print-cli-usage)
      (return-from sphinxlisp-decode nil))
    (loop for entry in (alexandria:hash-table-keys opts) do
	 (when (listp entry)
	   (setf entry (first entry)))
	 (unless (find entry *implemented-options-raw* :key 'first :test 'equalp)
	   (format t "WARNING: option '~A' is not implemented in this version!~%" entry)))
    (load-s3-model :folder (gethash "hmm" opts)
		   :mdef (gethash "mdef" opts)
		   :mean (gethash "mean" opts)
		   :var (gethash "var" opts)
		   :mixw (gethash "mixw" opts)
		   :tmat (gethash "tmat" opts)
		   :lda (gethash "lda" opts)
		   :dict (gethash "dict" opts))
    (setf *lm* (language-model::load-model (gethash "lm" opts)))
    (let ((log-base (read-from-string (gethash "logbase" opts)))
	  (beam (gethash "beam" opts)))
      (setf beam (substitute #\d #\e beam))
      (setf beam (read-from-string beam))
      (with-open-file (hyp (gethash "hyp" opts) :direction :output :if-exists :supersede)
	(with-open-file (hyp-seg (gethash "hypseg" opts) :direction :output :if-exists :supersede)

	  (loop for (file id) in (read-ctl-file opts)
	     for rec-result =  (decode file
				       :language-weight (read-from-string (gethash "lw" opts))
				       :relative-threshold (coerce beam 'single-float)
				       :show-spectrum-with-hypothesis nil
				       :insertion-penalty (log (read-from-string (gethash "wip" opts)) log-base)
				       :silence-penalty (log (read-from-string (gethash "silprob" opts)) log-base)
				       :compare-function #'log-gaussian-mixture-probability
				       :verbose (gethash "debug" opts)
				       :log-base log-base) do
	       (format hyp "~{~A~^ ~} (~A)~%" (rr-words rec-result) id)
	       (print-matchseg-line hyp-seg rec-result id)
	       (force-output hyp)
	       (force-output hyp-seg)))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;; Implemented CLI options ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defparameter *feature-extraction-param*
  '(("adchdr" 0 "Number of bytes to skip at the beginning of a waveform file (44 for WAV, 1024 for Sphere)")
    ("adcin" "no" "Input is waveform data rather than cepstra (-cepdir and -cepext are still used)")
    ("agc" "none" "Automatic gain control for c0 ('max', 'emax', 'noise', or 'none')")
    ("agcthresh" 2.0 "Initial threshold for automatic gain control")
    ("alpha" 0.97 "Preemphasis parameter")
    ("featparams" nil "File containing feature extraction parameters.")
    ("lowerf" 133.33334 "Lower edge of filters")
    ("ncep" 13 "Number of cep coefficients")
    ("nfft" 512 "Size of FFT")
    ("nfilt" 40 "Number of filter banks")
    ("round_filters" "yes" "Round mel filter frequencies to DFT points")
    ("samprate" 16000 "Sampling rate")
    ("upperf" 6855.4976 "Upper edge of filters")
    ("wlen" 0.025625 "Hamming window length"))
  "Available parameters for feature extraction.")

(defparameter *implemented-options-raw*
  '(("beam" 1.0e-55 "Beam selecting active HMMs (relative to best) in each frame [0(widest)..1(narrowest)]")
    ("cepdir" "." "Input cepstrum files directory (prefixed to filespecs in control file)")
    ("cepext" ".mfc" "Input cepstrum files extension (prefixed to filespecs in control file)")
    ("ceplen" 13 "Number of components in the input feature vector")
    ("ctl" nil "Control file listing utterances to be processed")
    ("ctlcount" 1000000000 "No. of utterances to be processed (after skipping -ctloffset entries)")
    ("ctloffset" 0 "No. of utterances at the beginning of -ctl file to be skipped")
    ("debug" nil "Verbosity level for debugging messages")
    ("dict" nil "Main pronunciation dictionary (lexicon) input file")
    ("fdict" nil "Silence and filler (noise) word pronunciation dictionary input file")
    ("fillpen" nil "Filler word probabilities input file (used in place of -silpen and -noisepen)")
    ("fillprob" 0.1 "Default non-silence filler word probability")
    ("hmm" nil "Directory for specifying Sphinx 3's hmm, the following files are assummed to be present, mdef, mean, var, mixw, tmat. If -mdef, -mean, -var, -mixw or -tmat are specified, they will override this command. ")
    ("hyp" nil "Recognition result file, with only words")
    ("hypseg" nil "Recognition result file, with word segmentations and scores")
    ("lda" nil "File containing transformation matrix to be applied to features (single-stream features only)")
    ("lm" nil "Word trigram language model input file")
    ("logbase" 1.0003 "Base in which all log-likelihoods calculated")
    ("logfn" nil "Log file (default stdout/stderr)")
    ("lw" 9.5 "Language weight")
    ("mdef" nil "Model definition input file")
    ("mean" nil "Mixture gaussian means input file")
    ("mixw" nil "Senone mixture weights input file")
    ("silprob" 0.1 "Default silence word probability")
    ("tmat" nil "HMM state transition matrix input file")
    ("topn" 4 "(S3.0 GMM Computation only) No. of top scoring densities computed in each mixture gaussian codebook (semi-continuous models only)")
    ("var" nil "Mixture gaussian variances input file")
    ("wip" 0.7 "Word insertion penalty"))
  "All the Sphinx3 CLI options that ARE implemented.  These aren't actually ALL implemented... yet.")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;; Unimplemented and all CLI options ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defparameter *unimplemented-options-raw*
  '(("backtrace" "yes" "Whether detailed backtrace information (word segmentation/scores) shown in log")
    ("bestpath" "no" "Whether to run bestpath DAG search after forward Viterbi pass")
    ("bestpathlw" nil "Language weight for bestpath DAG search (default: same as -lw)")
    ("bestscoredir" nil "(Mode 3) Directory for writing best score/frame (used to set beamwidth; one file/utterance)")
    ("bestsenscrdir" nil "When Best senone score directory.")
    ("bghist" "no" "Bigram-mode: If TRUE only one BP entry/frame; else one per LM state")
    ("bgonly" "no" "Only use Bigram language model in decoding")
    ("bptbldir" nil "Directory in which to dump word Viterbi back pointer table (for debugging)")
    ("bptblsize" 32768 "Number of BPtable entries to allocate initially (grown as necessary)")
    ("build_outdirs" "yes" "Create parent directories for output files")
    ("cb2mllr" ".1cls." "Senone to MLLR transformation matrix mapping file (or .1cls.)")
    ("ci_pbeam" 1e-80 "CI phone beam for CI-based GMM Selection. [0(widest) .. 1(narrowest)]")
    ("cmn" "current" "Cepstral mean normalization scheme ('current', 'prior', or 'none')")
    ("cmninit" 8.0 "Initial values (comma-separated) for cepstral mean when 'prior' is used")
    ("cond_ds" "no" "Conditional Down-sampling, override normal down sampling. require specify a gaussian selection map")
    ("ctl_lm" nil "(Not used in mode 2 and 3) Control file that list the corresponding LMs")
    ("ctl_mllr" nil "Control file that list the corresponding MLLR matrix for an utterance")
    ("dagfudge" 2 "(0..2); 1 or 2: add edge if endframe == startframe; 2: if start == end-1")
    ("dist_ds" "no" "Distance-based Down-sampling, override normal down sampling.")
    ("dither" "no" "Add 1/2-bit noise")
    ("doublebw" "no" "Use double bandwidth filters (same center freq)")
    ("ds" 1 "Ratio of Down-sampling the frame computation.")
    ("epl" 3 "(Mode 4 only) Entries Per Lextree; #successive entries into one lextree before lextree-entries shifted to the next")
    ("feat" "1s_c_d_dd" "Feature stream type, depends on the acoustic model")
    ("frate" 100 "Frame rate")
    ("fsg" nil "(FSG Mode (Mode 2) only) Finite state grammar")
    ("fsgusealtpron" "yes" "(FSG Mode (Mode 2) only) Use alternative pronunciations for FSG")
    ("fsgusefiller" "yes" "(FSG Mode (Mode 2) only) Insert filler words at each state.")
    ("gs" nil "Gaussian Selection Mapping.")
    ("gs4gs" "yes" "A flag that specified whether the input GS map will be used for Gaussian Selection. If it is disabled, the map will only provide information to other modules.")
    ("hmmdump" "no" "Whether to dump active HMM details to stderr (for debugging)")
    ("hmmdumpef" 200000000 "(Mode 3 only) Ending frame for dumping all active HMMs (for debugging/diagnosis/analysis)")
    ("hmmdumpsf" 200000000 "(Mode 3 only) Starting frame for dumping all active HMMs (for debugging/diagnosis/analysis)")
    ("hmmhistbinsize" 5000 "(Only used in Mode 4 and 5) Performance histogram: #frames vs #HMMs active; #HMMs/bin in this histogram")
    ("hypsegscore_unscale" "yes" "When displaying the results, whether to unscale back the acoustic score with the best score in a frame")
    ("inlatdir" nil "Input word-lattice directory with per-utt files for restricting words searched")
    ("inlatwin" 50 "Input word-lattice words starting within +/- <this argument> of current frame considered during search")
    ("input_endian" "little" "Endianness of input data, big or little, ignored if NIST or MS Wav")
    ("kdmaxbbi" -1 "Maximum number of Gaussians per leaf node in kd-Trees")
    ("kdmaxdepth" 0 "Maximum depth of kd-Trees to use")
    ("kdtree" nil "kd-Tree file for Gaussian selection (for .s2semi models only)")
    ("latcompress" "yes" "Whether lattice is compressed.")
    ("latext" "lat.gz" "Filename extension for lattice files (gzip compressed, by default - remove .gz for uncompressed)")
    ("ldadim" 0 "Dimensionality of output of feature transformation (0 to use entire matrix)")
    ("lextreedump" 0 "Whether to dump the lextree structure to stderr (for debugging), 1 for Ravi's format, 2 for Dot format, Larger than 2 will be treated as Ravi's format")
    ("lifter" 0 "Length of sin-curve for liftering, or 0 for no liftering.")
    ("lmctlfn" nil "Specify a set of language model")
    ("lmdumpdir" nil "The directory for dumping the DMP file. ")
    ("lmname" nil "Name of language model in -lmctlfn to use for all utterances")
    ("log3table" "yes" "Determines whether to use the logs3 table or to compute the values at run time.")
    ("logspec" "no" "Write out logspectral files instead of cepstra")
    ("lts_mismatch" "no" "Use CMUDict letter-to-sound rules to generate pronunciations for LM words doesn't appear in the dictionary . Use it with care. It assumes that the phone set in the mdef and dict are the same as the LTS rule. ")
    ("maxcdsenpf" 100000 "Max no. of distinct CD senone will be computed. ")
    ("maxedge" 2000000 "Max DAG edges allowed in utterance; aborted if exceeded; controls memory usage")
    ("maxhistpf" 100 "(Only used in Mode 4 and 5) Max no. of histories to maintain at each frame")
    ("maxhmmpf" 20000 "(Only used in Mode 4 and 5) Max no. of active HMMs to maintain at each frame; approx.")
    ("maxlmop" 100000000 "Max LMops in utterance after which it is aborted; controls CPU use (see maxlpf)")
    ("maxlpf" 40000 "Max LMops/frame after which utterance aborted; controls CPU use (see maxlmop)")
    ("maxppath" 1000000 "Max partial paths created after which utterance aborted; controls CPU/memory use")
    ("maxwpf" 20 "(Only used in Mode 4 and 5) Max no. of distinct word exits to maintain at each frame")
    ("mdef_fillers" "no" "Automatically add filler words from the model definition file")
    ("min_endfr" 3 "Nodes ignored during search if they persist for fewer than so many end frames")
    ("mixwfloor" 0.0000001 "Senone mixture weights floor (applied to data from -mixw file)")
    ("mllr" nil "MLLR transfomation matrix to be applied to mixture gaussian means")
    ("mode" "fwdtree" "Decoding mode, one of allphone, fsg, fwdflat, fwdtree.")
    ("nbest" 200 "Max. n-best hypotheses to generate per utterance")
    ("nbestdir" nil "Input word-lattice directory with per-utt files for restricting words searched")
    ("nbestext" "nbest.gz" "N-best filename extension (.gz or .Z extension for compression)")
    ("Nlextree" 3 "(Mode 4 only) No. of lextrees to be instantiated; entries into them staggered in time")
    ("Nstalextree" 25 "(Mode 5 only) No. of lextrees to be instantiated statically; ")
    ("op_mode" -1 "Operation mode, for internal use only.")
    ("outlatdir" nil "Directory in which to dump word lattices")
    ("outlatfmt" "s3" "Format in which to dump word lattices (either 's3' or 'htk')")
    ("pbeam" 1.0e-50 "Beam selecting HMMs transitioning to successors in each frame [0(widest)..1(narrowest)]")
    ("pheurtype" 0 "0 = bypass, 1= sum of max, 2 = sum of avg, 3 = sum of 1st senones only")
    ("phonepen" 1.0 "(Mode 2 and 3 only) Word insertion penalty")
    ("phsegdir" nil "(Allphone mode only) Output directory for phone segmentation files")
    ("pl_beam" 1.0e-80 "Beam for phoneme look-ahead. [1 (narrowest)..10000000(very wide)]")
    ("pl_window" 1 "Window size (actually window size-1) of phoneme look-ahead.")
    ("ppathdebug" "no" "Generate debugging information for N-best search. ")
    ("ptranskip" 0 "(Not used in Mode 3) Use wbeam for phone transitions every so many frames (if >= 1)")
    ("remove_dc" "no" "Remove DC offset from each frame")
    ("seed" -1 "Seed for random number generator; if less than zero, pick our own")
    ("sendump" nil "(S2 GMM computation only) Senone dump (compressed mixture weights) input file")
    ("senmgau" ".cont." "Senone to mixture-gaussian mapping file (or .semi. or .cont.)")
    ("smoothspec" "no" "Write out cepstral-smoothed logspectral files")
    ("subvq" nil "Sub-vector quantized form of acoustic model")
    ("subvqbeam" 3.0e-3 "Beam selecting best components within each mixture Gaussian [0(widest)..1(narrowest)]")
    ("svq4svq" "no" "A flag that specified whether the input SVQ will be used as approximate scores of the Gaussians")
    ("svspec" nil "Subvector specification (e.g., 24,0-11/25,12-23/26-38 or 0-12/13-25/26-38)")
    ("tighten_factor" 0.5 "From 0 to 1, it tightens the beam width when the frame is dropped")
    ("tmatfloor" 0.0001 "HMM state transition probability floor (applied to -tmat file)")
    ("topn_beam" 0 "(S2 GMM Computation only) Beam width used to determine top-N Gaussians (or a list, per-feature)")
    ("tracewhmm" nil "(Mode 3 only) Word whose active HMMs are to be traced (for debugging/diagnosis/analysis)")
    ("transform" "legacy" "Which type of transform to use to calculate cepstra (legacy, dct, or htk)")
    ("treeugprob" "yes" "If true, Use unigram probs in lextree")
    ("ugonly" "no" "Only use Unigram language model in decoding")
    ("unit_area" "yes" "Normalize mel filters to unit area")
    ("utt" nil "Utterance file to be processed (-ctlcount argument times)")
    ("uw" 0.7 "Unigram weight")
    ("varfloor" 0.0001 "Mixture gaussian variance floor (applied to data from -var file)")
    ("varnorm" "no" "Variance normalize each utterance (only if CMN == current)")
    ("verbose" "no" "Show input filenames")
    ("vqeval" 3 "Number of subvectors to use for SubVQ-based frame evaluation (3 for all)")
    ("warp_params" nil "Parameters defining the warping function")
    ("warp_type" "inverse_linear" "Warping function type (or shape)")
    ("wbeam" 1.0e-35 "Beam selecting word-final HMMs exiting in each frame [0(widest)..1(narrowest)]")
    ("wend_beam" 1.0e-80 "Beam selecting word-final HMMs exiting in each frame [0(widest) .. 1(narrowest)]")
    ("worddumpef" 200000000 "(Mode 3 only) Ending frame for dumping all active words (for debugging/diagnosis/analysis)")
    ("worddumpsf" 200000000 "(Mode 3 only) Starting frame for dumping all active words (for debugging/diagnosis/analysis)"))
  "All the Sphinx3 CLI options that are NOT implemented.")

(defparameter *full-options-raw*
  '(("adchdr" 0 "Number of bytes to skip at the beginning of a waveform file (44 for WAV, 1024 for Sphere)")
    ("adcin" "no" "Input is waveform data rather than cepstra (-cepdir and -cepext are still used)")
    ("agc" "none" "Automatic gain control for c0 ('max', 'emax', 'noise', or 'none')")
    ("agcthresh" 2.0 "Initial threshold for automatic gain control")
    ("alpha" 0.97 "Preemphasis parameter")
    ("backtrace" "yes" "Whether detailed backtrace information (word segmentation/scores) shown in log")
    ("beam" 1.0e-55 "Beam selecting active HMMs (relative to best) in each frame [0(widest)..1(narrowest)]")
    ("bestpath" "no" "Whether to run bestpath DAG search after forward Viterbi pass")
    ("bestpathlw" nil "Language weight for bestpath DAG search (default: same as -lw)")
    ("bestscoredir" nil "(Mode 3) Directory for writing best score/frame (used to set beamwidth; one file/utterance)")
    ("bestsenscrdir" nil "When Best senone score directory.")
    ("bghist" "no" "Bigram-mode: If TRUE only one BP entry/frame; else one per LM state")
    ("bgonly" "no" "Only use Bigram language model in decoding")
    ("bptbldir" nil "Directory in which to dump word Viterbi back pointer table (for debugging)")
    ("bptblsize" 32768 "Number of BPtable entries to allocate initially (grown as necessary)")
    ("build_outdirs" "yes" "Create parent directories for output files")
    ("cb2mllr" ".1cls." "Senone to MLLR transformation matrix mapping file (or .1cls.)")
    ("cepdir" "." "Input cepstrum files directory (prefixed to filespecs in control file)")
    ("cepext" ".mfc" "Input cepstrum files extension (prefixed to filespecs in control file)")
    ("ceplen" 13 "Number of components in the input feature vector")
    ("ci_pbeam" 1e-80 "CI phone beam for CI-based GMM Selection. [0(widest) .. 1(narrowest)]")
    ("cmn" "current" "Cepstral mean normalization scheme ('current', 'prior', or 'none')")
    ("cmninit" 8.0 "Initial values (comma-separated) for cepstral mean when 'prior' is used")
    ("cond_ds" "no" "Conditional Down-sampling, override normal down sampling. require specify a gaussian selection map")
    ("ctl" nil "Control file listing utterances to be processed")
    ("ctlcount" 1000000000 "No. of utterances to be processed (after skipping -ctloffset entries)")
    ("ctloffset" 0 "No. of utterances at the beginning of -ctl file to be skipped")
    ("ctl_lm" nil "(Not used in mode 2 and 3) Control file that list the corresponding LMs")
    ("ctl_mllr" nil "Control file that list the corresponding MLLR matrix for an utterance")
    ("dagfudge" 2 "(0..2); 1 or 2: add edge if endframe == startframe; 2: if start == end-1")
    ("debug" nil "Verbosity level for debugging messages")
    ("dict" nil "Main pronunciation dictionary (lexicon) input file")
    ("dist_ds" "no" "Distance-based Down-sampling, override normal down sampling.")
    ("dither" "no" "Add 1/2-bit noise")
    ("doublebw" "no" "Use double bandwidth filters (same center freq)")
    ("ds" 1 "Ratio of Down-sampling the frame computation.")
    ("epl" 3 "(Mode 4 only) Entries Per Lextree; #successive entries into one lextree before lextree-entries shifted to the next")
    ("fdict" nil "Silence and filler (noise) word pronunciation dictionary input file")
    ("feat" "1s_c_d_dd" "Feature stream type, depends on the acoustic model")
    ("featparams" nil "File containing feature extraction parameters.")
    ("fillpen" nil "Filler word probabilities input file (used in place of -silpen and -noisepen)")
    ("fillprob" 0.1 "Default non-silence filler word probability")
    ("frate" 100 "Frame rate")
    ("fsg" nil "(FSG Mode (Mode 2) only) Finite state grammar")
    ("fsgusealtpron" "yes" "(FSG Mode (Mode 2) only) Use alternative pronunciations for FSG")
    ("fsgusefiller" "yes" "(FSG Mode (Mode 2) only) Insert filler words at each state.")
    ("gs" nil "Gaussian Selection Mapping.")
    ("gs4gs" "yes" "A flag that specified whether the input GS map will be used for Gaussian Selection. If it is disabled, the map will only provide information to other modules.")
    ("hmm" nil "Directory for specifying Sphinx 3's hmm, the following files are assummed to be present, mdef, mean, var, mixw, tmat. If -mdef, -mean, -var, -mixw or -tmat are specified, they will override this command. ")
    ("hmmdump" "no" "Whether to dump active HMM details to stderr (for debugging)")
    ("hmmdumpef" 200000000 "(Mode 3 only) Ending frame for dumping all active HMMs (for debugging/diagnosis/analysis)")
    ("hmmdumpsf" 200000000 "(Mode 3 only) Starting frame for dumping all active HMMs (for debugging/diagnosis/analysis)")
    ("hmmhistbinsize" 5000 "(Only used in Mode 4 and 5) Performance histogram: #frames vs #HMMs active; #HMMs/bin in this histogram")
    ("hyp" nil "Recognition result file, with only words")
    ("hypseg" nil "Recognition result file, with word segmentations and scores")
    ("hypsegscore_unscale" "yes" "When displaying the results, whether to unscale back the acoustic score with the best score in a frame")
    ("inlatdir" nil "Input word-lattice directory with per-utt files for restricting words searched")
    ("inlatwin" 50 "Input word-lattice words starting within +/- <this argument> of current frame considered during search")
    ("input_endian" "little" "Endianness of input data, big or little, ignored if NIST or MS Wav")
    ("kdmaxbbi" -1 "Maximum number of Gaussians per leaf node in kd-Trees")
    ("kdmaxdepth" 0 "Maximum depth of kd-Trees to use")
    ("kdtree" nil "kd-Tree file for Gaussian selection (for .s2semi models only)")
    ("latcompress" "yes" "Whether lattice is compressed.")
    ("latext" "lat.gz" "Filename extension for lattice files (gzip compressed, by default - remove .gz for uncompressed)")
    ("lda" nil "File containing transformation matrix to be applied to features (single-stream features only)")
    ("ldadim" 0 "Dimensionality of output of feature transformation (0 to use entire matrix)")
    ("lextreedump" 0 "Whether to dump the lextree structure to stderr (for debugging), 1 for Ravi's format, 2 for Dot format, Larger than 2 will be treated as Ravi's format")
    ("lifter" 0 "Length of sin-curve for liftering, or 0 for no liftering.")
    ("lm" nil "Word trigram language model input file")
    ("lmctlfn" nil "Specify a set of language model")
    ("lmdumpdir" nil "The directory for dumping the DMP file. ")
    ("lmname" nil "Name of language model in -lmctlfn to use for all utterances")
    ("log3table" "yes" "Determines whether to use the logs3 table or to compute the values at run time.")
    ("logbase" 1.0003 "Base in which all log-likelihoods calculated")
    ("logfn" nil "Log file (default stdout/stderr)")
    ("logspec" "no" "Write out logspectral files instead of cepstra")
    ("lowerf" 133.33334 "Lower edge of filters")
    ("lts_mismatch" "no" "Use CMUDict letter-to-sound rules to generate pronunciations for LM words doesn't appear in the dictionary . Use it with care. It assumes that the phone set in the mdef and dict are the same as the LTS rule. ")
    ("lw" 9.5 "Language weight")
    ("maxcdsenpf" 100000 "Max no. of distinct CD senone will be computed. ")
    ("maxedge" 2000000 "Max DAG edges allowed in utterance; aborted if exceeded; controls memory usage")
    ("maxhistpf" 100 "(Only used in Mode 4 and 5) Max no. of histories to maintain at each frame")
    ("maxhmmpf" 20000 "(Only used in Mode 4 and 5) Max no. of active HMMs to maintain at each frame; approx.")
    ("maxlmop" 100000000 "Max LMops in utterance after which it is aborted; controls CPU use (see maxlpf)")
    ("maxlpf" 40000 "Max LMops/frame after which utterance aborted; controls CPU use (see maxlmop)")
    ("maxppath" 1000000 "Max partial paths created after which utterance aborted; controls CPU/memory use")
    ("maxwpf" 20 "(Only used in Mode 4 and 5) Max no. of distinct word exits to maintain at each frame")
    ("mdef" nil "Model definition input file")
    ("mdef_fillers" "no" "Automatically add filler words from the model definition file")
    ("mean" nil "Mixture gaussian means input file")
    ("min_endfr" 3 "Nodes ignored during search if they persist for fewer than so many end frames")
    ("mixw" nil "Senone mixture weights input file")
    ("mixwfloor" 0.0000001 "Senone mixture weights floor (applied to data from -mixw file)")
    ("mllr" nil "MLLR transfomation matrix to be applied to mixture gaussian means")
    ("mode" "fwdtree" "Decoding mode, one of allphone, fsg, fwdflat, fwdtree.")
    ("nbest" 200 "Max. n-best hypotheses to generate per utterance")
    ("nbestdir" nil "Input word-lattice directory with per-utt files for restricting words searched")
    ("nbestext" "nbest.gz" "N-best filename extension (.gz or .Z extension for compression)")
    ("ncep" 13 "Number of cep coefficients")
    ("nfft" 512 "Size of FFT")
    ("nfilt" 40 "Number of filter banks")
    ("Nlextree" 3 "(Mode 4 only) No. of lextrees to be instantiated; entries into them staggered in time")
    ("Nstalextree" 25 "(Mode 5 only) No. of lextrees to be instantiated statically; ")
    ("op_mode" -1 "Operation mode, for internal use only.")
    ("outlatdir" nil "Directory in which to dump word lattices")
    ("outlatfmt" "s3" "Format in which to dump word lattices (either 's3' or 'htk')")
    ("pbeam" 1.0e-50 "Beam selecting HMMs transitioning to successors in each frame [0(widest)..1(narrowest)]")
    ("pheurtype" 0 "0 = bypass, 1= sum of max, 2 = sum of avg, 3 = sum of 1st senones only")
    ("phonepen" 1.0 "(Mode 2 and 3 only) Word insertion penalty")
    ("phsegdir" nil "(Allphone mode only) Output directory for phone segmentation files")
    ("pl_beam" 1.0e-80 "Beam for phoneme look-ahead. [1 (narrowest)..10000000(very wide)]")
    ("pl_window" 1 "Window size (actually window size-1) of phoneme look-ahead.")
    ("ppathdebug" "no" "Generate debugging information for N-best search. ")
    ("ptranskip" 0 "(Not used in Mode 3) Use wbeam for phone transitions every so many frames (if >= 1)")
    ("remove_dc" "no" "Remove DC offset from each frame")
    ("round_filters" "yes" "Round mel filter frequencies to DFT points")
    ("samprate" 16000 "Sampling rate")
    ("seed" -1 "Seed for random number generator; if less than zero, pick our own")
    ("sendump" nil "(S2 GMM computation only) Senone dump (compressed mixture weights) input file")
    ("senmgau" ".cont." "Senone to mixture-gaussian mapping file (or .semi. or .cont.)")
    ("silprob" 0.1 "Default silence word probability")
    ("smoothspec" "no" "Write out cepstral-smoothed logspectral files")
    ("subvq" nil "Sub-vector quantized form of acoustic model")
    ("subvqbeam" 3.0e-3 "Beam selecting best components within each mixture Gaussian [0(widest)..1(narrowest)]")
    ("svq4svq" "no" "A flag that specified whether the input SVQ will be used as approximate scores of the Gaussians")
    ("svspec" nil "Subvector specification (e.g., 24,0-11/25,12-23/26-38 or 0-12/13-25/26-38)")
    ("tighten_factor" 0.5 "From 0 to 1, it tightens the beam width when the frame is dropped")
    ("tmat" nil "HMM state transition matrix input file")
    ("tmatfloor" 0.0001 "HMM state transition probability floor (applied to -tmat file)")
    ("topn" 4 "(S3.0 GMM Computation only) No. of top scoring densities computed in each mixture gaussian codebook (semi-continuous models only)")
    ("topn_beam" 0 "(S2 GMM Computation only) Beam width used to determine top-N Gaussians (or a list, per-feature)")
    ("tracewhmm" nil "(Mode 3 only) Word whose active HMMs are to be traced (for debugging/diagnosis/analysis)")
    ("transform" "legacy" "Which type of transform to use to calculate cepstra (legacy, dct, or htk)")
    ("treeugprob" "yes" "If true, Use unigram probs in lextree")
    ("ugonly" "no" "Only use Unigram language model in decoding")
    ("unit_area" "yes" "Normalize mel filters to unit area")
    ("upperf" 6855.4976 "Upper edge of filters")
    ("utt" nil "Utterance file to be processed (-ctlcount argument times)")
    ("uw" 0.7 "Unigram weight")
    ("var" nil "Mixture gaussian variances input file")
    ("varfloor" 0.0001 "Mixture gaussian variance floor (applied to data from -var file)")
    ("varnorm" "no" "Variance normalize each utterance (only if CMN == current)")
    ("verbose" "no" "Show input filenames")
    ("vqeval" 3 "Number of subvectors to use for SubVQ-based frame evaluation (3 for all)")
    ("warp_params" nil "Parameters defining the warping function")
    ("warp_type" "inverse_linear" "Warping function type (or shape)")
    ("wbeam" 1.0e-35 "Beam selecting word-final HMMs exiting in each frame [0(widest)..1(narrowest)]")
    ("wend_beam" 1.0e-80 "Beam selecting word-final HMMs exiting in each frame [0(widest) .. 1(narrowest)]")
    ("wip" 0.7 "Word insertion penalty")
    ("wlen" 0.025625 "Hamming window length"))
  "ALL the Sphinx3 CLI options.")
